/* ==========================================================================
   Mixins - Mixins riutilizzabili
   ========================================================================== */

@use "sass:math";
@use "sass:map";
@use "sass:color";
@use "variables" as v;
@use "colors" as c;

// Responsive Breakpoints
@mixin breakpoint($size) {
  @if map.has-key(v.$breakpoints, $size) {
    @media (min-width: map.get(v.$breakpoints, $size)) {
      @content;
    }
  } @else {
    @warn "Breakpoint #{$size} non trovato in $breakpoints.";
  }
}

@mixin breakpoint-down($size) {
  @if map.has-key(v.$breakpoints, $size) {
    $breakpoint-value: map.get(v.$breakpoints, $size);
    @media (max-width: calc(#{$breakpoint-value} - 1px)) {
      @content;
    }
  } @else {
    @warn "Breakpoint #{$size} non trovato in $breakpoints.";
  }
}

@mixin breakpoint-between($min, $max) {
  @if map.has-key(v.$breakpoints, $min) and map.has-key(v.$breakpoints, $max) {
    $min-value: map.get(v.$breakpoints, $min);
    $max-value: map.get(v.$breakpoints, $max);
    @media (min-width: #{$min-value}) and (max-width: calc(#{$max-value} - 1px)) {
      @content;
    }
  } @else {
    @warn "Breakpoint #{$min} o #{$max} non trovato in $breakpoints.";
  }
}

// Focus States
@mixin focus-ring($color: c.$focus-ring) {
  outline: none;
  box-shadow: 0 0 0 3px $color;
}

@mixin focus-visible {
  &:focus-visible {
    @include focus-ring();
  }
}

// Button Variants
@mixin button-variant(
  $bg-color,
  $text-color: c.$white,
  $border-color: $bg-color
) {
  background-color: $bg-color;
  color: $text-color;
  border-color: $border-color;

  &:hover:not(:disabled) {
    background-color: color.adjust($bg-color, $lightness: -8%);
    border-color: color.adjust($border-color, $lightness: -8%);
  }

  &:active:not(:disabled) {
    background-color: color.adjust($bg-color, $lightness: -12%);
    border-color: color.adjust($border-color, $lightness: -12%);
    transform: translateY(1px);
  }

  &:focus {
    @include focus-ring(rgba($bg-color, 0.5));
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-outline($color) {
  background-color: transparent;
  color: $color;
  border-color: $color;

  &:hover:not(:disabled) {
    background-color: $color;
    color: c.$white;
  }

  &:active:not(:disabled) {
    background-color: color.adjust($color, $lightness: -8%);
    border-color: color.adjust($color, $lightness: -8%);
    transform: translateY(1px);
  }

  &:focus {
    @include focus-ring(rgba($color, 0.5));
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-ghost($color) {
  background-color: transparent;
  color: $color;
  border-color: transparent;

  &:hover:not(:disabled) {
    background-color: rgba($color, 0.1);
  }

  &:active:not(:disabled) {
    background-color: rgba($color, 0.2);
    transform: translateY(1px);
  }

  &:focus {
    @include focus-ring(rgba($color, 0.5));
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

// Layout Mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin fixed-full {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// Text Mixins
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  overflow: hidden;
}

@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Animation Mixins
@mixin transition(
  $properties: all,
  $duration: v.$duration-150,
  $timing: v.$ease-in-out
) {
  transition: $properties $duration $timing;
}

@mixin transform-gpu {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000px;
}

// Card/Surface Mixins
@mixin card($shadow: v.$shadow-md, $radius: v.$radius-lg) {
  background-color: c.$bg-card;
  border-radius: $radius;
  box-shadow: $shadow;
  border: v.$border solid c.$border-light;
}

@mixin surface-elevated($level: 1) {
  @if $level == 1 {
    box-shadow: v.$shadow-sm;
  } @else if $level == 2 {
    box-shadow: v.$shadow-base;
  } @else if $level == 3 {
    box-shadow: v.$shadow-md;
  } @else if $level == 4 {
    box-shadow: v.$shadow-lg;
  } @else if $level == 5 {
    box-shadow: v.$shadow-xl;
  } @else {
    box-shadow: v.$shadow-2xl;
  }
}

// Form Mixins
@mixin form-control {
  appearance: none;
  background-color: c.$bg-surface;
  border: v.$border solid c.$border-medium;
  border-radius: v.$radius-md;
  padding: v.$space-2 v.$space-3;
  font-size: v.$font-size-base;
  line-height: v.$line-height-normal;
  color: c.$text-primary;
  transition: v.$transition-colors;

  &::placeholder {
    color: c.$text-muted;
  }

  &:focus {
    outline: none;
    border-color: c.$primary;
    @include focus-ring(c.$focus-ring);
  }

  &:disabled {
    background-color: c.$bg-muted;
    color: c.$text-disabled;
    cursor: not-allowed;
  }

  &.error {
    border-color: c.$danger;

    &:focus {
      @include focus-ring(rgba(c.$danger, 0.5));
    }
  }
}

// Utility Mixins
@mixin reset-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

@mixin reset-button {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
  outline: none;
}

@mixin aspect-ratio($width, $height) {
  aspect-ratio: math.div($width, $height);

  // Fallback per browser che non supportano aspect-ratio
  @supports not (aspect-ratio: 1) {
    &::before {
      content: "";
      display: block;
      padding-top: math.percentage(math.div($height, $width));
    }
  }
}

// Scrollbar Styling
@mixin custom-scrollbar(
  $thumb-color: c.$gray-400,
  $track-color: c.$gray-100,
  $size: 8px
) {
  &::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: v.$radius-full;

    &:hover {
      background: color.adjust($thumb-color, $lightness: -10%);
    }
  }

  // Firefox
  scrollbar-width: thin;
  scrollbar-color: $thumb-color $track-color;
}

@mixin button-ghost($color) {
  background-color: transparent;
  color: $color;
  border-color: transparent;

  &:hover:not(:disabled) {
    background-color: rgba($color, 0.1);
  }

  &:active:not(:disabled) {
    background-color: rgba($color, 0.2);
    transform: translateY(1px);
  }

  &:focus {
    @include focus-ring(rgba($color, 0.5));
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

// Layout Mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin fixed-full {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// Text Mixins
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  overflow: hidden;
}

@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Animation Mixins
@mixin transition(
  $properties: all,
  $duration: v.$duration-150,
  $timing: v.$ease-in-out
) {
  transition: $properties $duration $timing;
}

@mixin transform-gpu {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000px;
}

// Card/Surface Mixins
@mixin card($shadow: v.$shadow-md, $radius: v.$radius-lg) {
  background-color: c.$bg-card;
  border-radius: $radius;
  box-shadow: $shadow;
  border: v.$border solid c.$border-light;
}

@mixin surface-elevated($level: 1) {
  @if $level == 1 {
    box-shadow: v.$shadow-sm;
  } @else if $level == 2 {
    box-shadow: v.$shadow-base;
  } @else if $level == 3 {
    box-shadow: v.$shadow-md;
  } @else if $level == 4 {
    box-shadow: v.$shadow-lg;
  } @else if $level == 5 {
    box-shadow: v.$shadow-xl;
  } @else {
    box-shadow: v.$shadow-2xl;
  }
}

// Form Mixins
@mixin form-control {
  appearance: none;
  background-color: c.$bg-surface;
  border: v.$border solid c.$border-medium;
  border-radius: v.$radius-md;
  padding: v.$space-2 v.$space-3;
  font-size: v.$font-size-base;
  line-height: v.$line-height-normal;
  color: c.$text-primary;
  transition: v.$transition-colors;

  &::placeholder {
    color: c.$text-muted;
  }

  &:focus {
    outline: none;
    border-color: c.$primary;
    @include focus-ring(c.$focus-ring);
  }

  &:disabled {
    background-color: c.$bg-muted;
    color: c.$text-disabled;
    cursor: not-allowed;
  }

  &.error {
    border-color: c.$danger;

    &:focus {
      @include focus-ring(rgba(c.$danger, 0.5));
    }
  }
}

// Utility Mixins
@mixin reset-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

@mixin reset-button {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
  outline: none;
}

@mixin aspect-ratio($width, $height) {
  aspect-ratio: math.div($width, $height);

  // Fallback per browser che non supportano aspect-ratio
  @supports not (aspect-ratio: 1) {
    &::before {
      content: "";
      display: block;
      padding-top: percentage(math.div($height, $width));
    }
  }
}

// Scrollbar Styling
@mixin custom-scrollbar(
  $thumb-color: c.$gray-400,
  $track-color: c.$gray-100,
  $size: 8px
) {
  &::-webkit-scrollbar {
    width: $size;
    height: $size;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: v.$radius-full;

    &:hover {
      background: darken($thumb-color, 10%);
    }
  }

  // Firefox
  scrollbar-width: thin;
  scrollbar-color: $thumb-color $track-color;
}
